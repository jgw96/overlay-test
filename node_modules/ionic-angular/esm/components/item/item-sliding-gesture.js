var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { closest, pointerCoord } from '../../util/dom';
import { UIEventManager } from '../../util/ui-event-manager';
import { GesturePriority } from '../../gestures/gesture-controller';
var DRAG_THRESHOLD = 10;
var MAX_ATTACK_ANGLE = 20;
export var ItemSlidingGesture = function () {
    function ItemSlidingGesture(list) {
        _classCallCheck(this, ItemSlidingGesture);

        this.list = list;
        this.preSelectedContainer = null;
        this.selectedContainer = null;
        this.openContainer = null;
        this.events = new UIEventManager(false);
        this.panDetector = new PanXRecognizer(DRAG_THRESHOLD, MAX_ATTACK_ANGLE);
        this.gesture = list.gestureCtrl.create('item-sliding', {
            priority: GesturePriority.Interactive
        });
        this.pointerEvents = this.events.pointerEvents({
            element: list.getNativeElement(),
            pointerDown: this.pointerStart.bind(this),
            pointerMove: this.pointerMove.bind(this),
            pointerUp: this.pointerEnd.bind(this)
        });
    }

    _createClass(ItemSlidingGesture, [{
        key: 'pointerStart',
        value: function pointerStart(ev) {
            if (this.selectedContainer) {
                return false;
            }
            // Get swiped sliding container
            var container = getContainer(ev);
            if (!container) {
                this.closeOpened();
                return false;
            }
            // Close open container if it is not the selected one.
            if (container !== this.openContainer && this.closeOpened()) {
                return false;
            }
            // Try to start gesture
            if (!this.gesture.start()) {
                this.gesture.release();
                return false;
            }
            var coord = pointerCoord(ev);
            this.preSelectedContainer = container;
            this.panDetector.start(coord);
            this.firstCoordX = coord.x;
            this.firstTimestamp = Date.now();
            return true;
        }
    }, {
        key: 'pointerMove',
        value: function pointerMove(ev) {
            if (this.selectedContainer) {
                this.onDragMove(ev);
                return;
            }
            var coord = pointerCoord(ev);
            if (this.panDetector.detect(coord)) {
                if (this.panDetector.isPanX() && this.gesture.capture()) {
                    this.onDragStart(ev, coord);
                    return;
                }
                // Detection/capturing was not successful, aborting!
                this.closeOpened();
                this.pointerEvents.stop();
            }
        }
    }, {
        key: 'pointerEnd',
        value: function pointerEnd(ev) {
            this.gesture.release();
            if (this.selectedContainer) {
                this.onDragEnd(ev);
            } else {
                this.closeOpened();
            }
        }
    }, {
        key: 'onDragStart',
        value: function onDragStart(ev, coord) {
            var container = getContainer(ev);
            if (!container) {
                console.debug('onDragStart, no itemContainerEle');
                return false;
            }
            ev.preventDefault();
            this.selectedContainer = this.openContainer = this.preSelectedContainer;
            container.startSliding(coord.x);
        }
    }, {
        key: 'onDragMove',
        value: function onDragMove(ev) {
            var coordX = pointerCoord(ev).x;
            ev.preventDefault();
            this.selectedContainer.moveSliding(coordX);
        }
    }, {
        key: 'onDragEnd',
        value: function onDragEnd(ev) {
            ev.preventDefault();
            var coordX = pointerCoord(ev).x;
            var deltaX = coordX - this.firstCoordX;
            var deltaT = Date.now() - this.firstTimestamp;
            var openAmount = this.selectedContainer.endSliding(deltaX / deltaT);
            this.selectedContainer = null;
            this.preSelectedContainer = null;
        }
    }, {
        key: 'closeOpened',
        value: function closeOpened() {
            this.selectedContainer = null;
            this.gesture.release();
            if (this.openContainer) {
                this.openContainer.close();
                this.openContainer = null;
                return true;
            }
            return false;
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            this.gesture.destroy();
            this.events.unlistenAll();
            this.closeOpened();
            this.list = null;
            this.preSelectedContainer = null;
            this.selectedContainer = null;
            this.openContainer = null;
        }
    }]);

    return ItemSlidingGesture;
}();
function getContainer(ev) {
    var ele = closest(ev.target, 'ion-item-sliding', true);
    if (ele) {
        return ele['$ionComponent'];
    }
    return null;
}

var AngleRecognizer = function () {
    function AngleRecognizer(threshold) {
        _classCallCheck(this, AngleRecognizer);

        this._angle = null;
        this.threshold = Math.pow(threshold, 2);
    }

    _createClass(AngleRecognizer, [{
        key: 'start',
        value: function start(coord) {
            this.startCoord = coord;
            this._angle = 0;
            this.dirty = true;
        }
    }, {
        key: 'angle',
        value: function angle() {
            return this._angle;
        }
    }, {
        key: 'detect',
        value: function detect(coord) {
            if (!this.dirty) {
                return false;
            }
            var deltaX = coord.x - this.startCoord.x;
            var deltaY = coord.y - this.startCoord.y;
            var distance = deltaX * deltaX + deltaY * deltaY;
            if (distance >= this.threshold) {
                this._angle = Math.atan2(deltaY, deltaX);
                this.dirty = false;
                return true;
            }
            return false;
        }
    }]);

    return AngleRecognizer;
}();

var degresToRadians = Math.PI / 180;

var PanXRecognizer = function (_AngleRecognizer) {
    _inherits(PanXRecognizer, _AngleRecognizer);

    function PanXRecognizer(threshold, maxAngle) {
        _classCallCheck(this, PanXRecognizer);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PanXRecognizer).call(this, threshold));

        _this.maxAngle = maxAngle * degresToRadians;
        return _this;
    }

    _createClass(PanXRecognizer, [{
        key: 'start',
        value: function start(coord) {
            _get(Object.getPrototypeOf(PanXRecognizer.prototype), 'start', this).call(this, coord);
            this._isPanX = false;
        }
    }, {
        key: 'isPanX',
        value: function isPanX() {
            return this._isPanX;
        }
    }, {
        key: 'detect',
        value: function detect(coord) {
            if (_get(Object.getPrototypeOf(PanXRecognizer.prototype), 'detect', this).call(this, coord)) {
                var angle = Math.abs(this.angle());
                this._isPanX = angle < this.maxAngle || Math.abs(angle - Math.PI) < this.maxAngle;
                return true;
            }
            return false;
        }
    }]);

    return PanXRecognizer;
}(AngleRecognizer);